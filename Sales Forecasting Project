# sales_forecasting.py

# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error

# 1. Data Preparation: Generate synthetic sales data
def prepare_data():
    # Generate synthetic sales data
    np.random.seed(42)
    months = pd.date_range(start="2020-01-01", periods=36, freq='M')  # 3 years of data
    sales = np.random.randint(200, 500, size=len(months)) + np.linspace(0, 100, len(months))  # Trending upward

    # Create DataFrame
    df = pd.DataFrame({'Month': months, 'Sales': sales})
    df.set_index('Month', inplace=True)

    return df

# 2. Exploratory Data Analysis (EDA): Visualize the sales trend
def visualize_data(df):
    plt.figure(figsize=(12, 6))
    sns.lineplot(x=df.index, y=df['Sales'], marker='o')
    plt.title("Monthly Sales Trend")
    plt.xlabel("Date")
    plt.ylabel("Sales")
    plt.grid(True)
    plt.show()

# 3. Build the Forecasting Model: Linear Regression
def build_model(df):
    # Convert date to numerical value for regression
    df['Month_Num'] = range(1, len(df) + 1)

    # Split data into training and test sets
    X = df[['Month_Num']]
    y = df['Sales']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

    # Train Linear Regression Model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Predict sales
    y_pred = model.predict(X_test)

    # Evaluate Model
    mae = mean_absolute_error(y_test, y_pred)
    print(f"Mean Absolute Error: {mae:.2f}")

    return model, X_test, y_test, y_pred

# 4. Visualize Predictions vs Actual Sales
def visualize_predictions(df, X_test, y_test, y_pred):
    plt.figure(figsize=(10, 5))
    plt.plot(df.index[-len(y_test):], y_test, label="Actual Sales", marker='o')
    plt.plot(df.index[-len(y_test):], y_pred, label="Predicted Sales", linestyle='dashed', marker='x')
    plt.legend()
    plt.title("Actual vs Predicted Sales")
    plt.show()

# Main function to run the entire workflow
def main():
    # Step 1: Prepare the data
    df = prepare_data()

    # Step 2: Visualize the sales data
    visualize_data(df)

    # Step 3: Build the forecasting model
    model, X_test, y_test, y_pred = build_model(df)

    # Step 4: Visualize the actual vs predicted sales
    visualize_predictions(df, X_test, y_test, y_pred)

if __name__ == "__main__":
    main()
